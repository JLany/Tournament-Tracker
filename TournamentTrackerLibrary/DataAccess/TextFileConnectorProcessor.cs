using System.Configuration;
using TournamentTrackerLibrary.Models;

namespace TournamentTrackerLibrary.DataAccess.TextFileHelpers
{
    public static class TextFileConnectorProcessor
    {
        /// <summary>
        /// Connects the storage directory from <see cref="AppSettings"/> 
        /// to the specified file name
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public static string FullFilePath(this string fileName)
            => $@"{ConfigurationManager.AppSettings["textFilesDirectory"]}\{fileName}";

        /// <summary>
        /// Loads file contents into a <see cref="List{string}"/> of <see cref="string"/>.
        /// Invoked on a full file path
        /// </summary>
        /// <param name="filePath">Absolute full file path</param>
        /// <returns><see cref="List{T}"/> of <see cref="string"/>: lines in the file</returns>
        public static List<string> LoadFile(this string filePath)
        {
            if (!File.Exists(filePath))
            {
                return new List<string>();
            }

            return File.ReadAllLines(filePath).ToList();
        }

        public static List<PersonModel> ConvertToPersonModels(this List<string> lines)
        {
            var persons = new List<PersonModel>();

            foreach (var line in lines)
            {
                 string[] cols = line.Split(',');

                var p = new PersonModel
                {
                    Id = int.Parse(cols[0]),
                    FirstName = cols[1],
                    LastName = cols[2],
                    EmailAddress = cols[3],
                    PhoneNumber = cols[4]
                };

                persons.Add(p);
            }

            return persons;
        }

        public static List<PrizeModel> ConvertToPrizeModels(this List<string> lines)
        {
            var prizes = new List<PrizeModel>();

            foreach (var line in lines)
            {
                string[] cols = line.Split(',');

                // Here we do not use the `fail tolerant constructor` 
                // because we do not want to have a half ass built model
                // Alternatively, we want this method to crash when something happens
                // this is due to the fact that we read from a file that is generated by
                // the app, so we do expect the data to be right, the opposite is an Exception!
                // Leaving the app in an uncertain state is not the best thing to do with our own hands
                var p = new PrizeModel
                {
                    Id = int.Parse(cols[0]),
                    PlaceNumber = int.Parse(cols[1]),
                    PlaceName = cols[2],
                    PrizeAmount = decimal.Parse(cols[3]),
                    PrizePercentage = int.Parse(cols[4])
                };

                prizes.Add(p);
            }

            return prizes;
        }

        public static List<TeamModel> ConvertToTeamModels(this List<string> lines, string personsFileName)
        {
            // {id,name,list of members' ids}
            // 17,Eagels,14|5|17|18

            var teams = new List<TeamModel>();

            foreach (var line in lines)
            {
                string[] cols = line.Split(',');

                var team = new TeamModel
                {
                    Id = int.Parse(cols[0]),
                    TeamName = cols[1],
                };

                string[] memberIds = cols[2].Split('|');
                var persons = personsFileName.FullFilePath().LoadFile().ConvertToPersonModels();

                foreach (var memberId in memberIds)
                {
                    // get from file of person models
                    PersonModel member = persons.Where(p => p.Id == int.Parse(memberId)).First();
                    team.TeamMembers.Add(member);
                }
            }

            return teams;
        }

        public static void SaveToModelFile<T>(this List<T> models, string fileName) where T : class
        {
            var lines = new List<string>();

            foreach (var m in models)
            {
                if (null != m)
                {
                    string line = "";

                    foreach (var prop in m.GetType().GetProperties())
                    {
                        line += $"{prop.GetValue(m)},";
                    }

                    line = line.Remove(line.Length - 1);
                    lines.Add(line);
                }
            }

            File.WriteAllLines(fileName.FullFilePath(), lines);
        }

        public static void SaveToTeamModelFile(this List<TeamModel> teams, string fileName)
        {
            var lines = new List<string>();

            foreach (TeamModel t in teams)
            {
                string line = $"{t.Id},{t.TeamName},{t.TeamMembers.ConvertIdsToString()}";
                lines.Add(line);
            }

            File.WriteAllLines(fileName.FullFilePath(), lines);
        }

        private static string ConvertIdsToString<T>(this List<T> models) where T : class, IDataModel
        {
            string output = "";

            if (models.Count == 0)
            {
                return "";
            }

            foreach (var model in models)
            {
                output += $"{model.Id}|";
            }

            output = output.Remove(output.Length - 1);
            return output;
        }
    }
}
