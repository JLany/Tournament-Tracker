using System.Configuration;
using TournamentTrackerLibrary.Models;

namespace TournamentTrackerLibrary.DataAccess.TextFileHelpers
{
    public static class TextFileConnectorProcessor
    {
        /// <summary>
        /// Connects the storage directory from <see cref="AppSettings"/> 
        /// to the specified file name
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public static string FullFilePath(this string fileName)
            => $@"{ConfigurationManager.AppSettings["textFilesDirectory"]}\{fileName}";

        /// <summary>
        /// Loads file contents into a <see cref="List{string}"/> of <see cref="string"/>.
        /// Invoked on a full file path
        /// </summary>
        /// <param name="filePath">Absolute full file path</param>
        /// <returns><see cref="List{T}"/> of <see cref="string"/>: lines in the file</returns>
        public static List<string> LoadFile(this string filePath)
        {
            if (!File.Exists(filePath))
            {
                return new List<string>();
            }

            return File.ReadAllLines(filePath).ToList();
        }

        public static List<PersonModel> ConvertToPersonModels(this List<string> lines)
        {
            var persons = new List<PersonModel>();

            foreach (string line in lines)
            {
                string[] cols = line.Split(',');

                var p = new PersonModel
                {
                    Id = int.Parse(cols[0]),
                    FirstName = cols[1],
                    LastName = cols[2],
                    EmailAddress = cols[3],
                    PhoneNumber = cols[4]
                };

                persons.Add(p);
            }

            return persons;
        }

        public static List<PrizeModel> ConvertToPrizeModels(this List<string> lines)
        {
            var prizes = new List<PrizeModel>();

            foreach (string line in lines)
            {
                string[] cols = line.Split(',');

                // here we do not use the `fail tolerant constructor` 
                // because we do not want to have a half ass built model
                // alternatively, we want this method to crash when something happens
                // this is due to the fact that we read from a file that is generated by
                // the app, so we do expect the data to be right, the opposite is an Exception!
                var p = new PrizeModel
                {
                    Id = int.Parse(cols[0]),
                    PlaceNumber = int.Parse(cols[1]),
                    PlaceName = cols[2],
                    PrizeAmount = decimal.Parse(cols[3]),
                    PrizePercentage = int.Parse(cols[4])
                };

                prizes.Add(p);
            }

            return prizes;
        }

        public static void SaveToPersonModelFile(this List<PersonModel> models, string fileName)
        {
            var lines = new List<string>();

            foreach (PersonModel p in models)
            {
                lines.Add($"{p.Id},{p.FirstName},{p.LastName},{p.EmailAddress},{p.PhoneNumber}");
            }

            File.WriteAllLines(fileName.FullFilePath(), lines);
        }

        public static void SaveToPrizeModelFile(this List<PrizeModel> models, string fileName)
        {
            List<string> lines = new List<string>();

            foreach (PrizeModel p in models)
            {
                lines.Add($"{p.Id},{p.PlaceNumber},{p.PlaceName},{p.PrizeAmount},{p.PrizePercentage}");
            }

            File.WriteAllLines(fileName.FullFilePath(), lines);
        }
    }
}
